name: 'deploy'
on:
  push:
    paths:
      - 'backend/**'
      - '.github/workflows/**'
    branches:
      - 'main'
jobs:
  makeTagAndRelease:
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.create_tag.outputs.new_tag }}
    steps:
      - uses: actions/checkout@v4
      - name: Create Tag
        id: create_tag
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.create_tag.outputs.new_tag }}
          release_name: Release ${{ steps.create_tag.outputs.new_tag }}
          body: ${{ steps.create_tag.outputs.changelog }}
          draft: false
          prerelease: false
  buildImageAndPush:
    name: 도커 이미지 빌드와 푸시
    needs: makeTagAndRelease
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Docker Buildx 설치
        uses: docker/setup-buildx-action@v2
      - name: 레지스트리 로그인
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: set lower case owner name
        run: |
          echo "OWNER_LC=${OWNER,,}" >> ${GITHUB_ENV}
        env:
          OWNER: "${{ github.repository_owner }}"
      - name: 환경 변수 설정 확인
        run: |
          echo "환경 변수들이 설정되었는지 확인합니다..."
          echo "GOOGLE_CLIENT_ID가 설정되어 있습니다: ${{ secrets.GOOGLE_CLIENT_ID != '' }}"
          echo "KAKAO_CLIENT_ID가 설정되어 있습니다: ${{ secrets.KAKAO_CLIENT_ID != '' }}"
          echo "CUSTOM_MAIL_USERNAME이 설정되어 있습니다: ${{ secrets.CUSTOM_MAIL_USERNAME != '' }}"
      - name: 빌드 앤 푸시
        uses: docker/build-push-action@v3
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ env.OWNER_LC }}/ims:${{ needs.makeTagAndRelease.outputs.tag_name }},
            ghcr.io/${{ env.OWNER_LC }}/ims:latest
  deploy:
    runs-on: ubuntu-latest
    needs: [ buildImageAndPush ]
    steps:
      - name: AWS SSM Send-Command
        uses: peterkimzz/aws-ssm-send-command@master
        id: ssm
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          instance-ids: "i-0b65a09c9b8da83a5"
          working-directory: /
          comment: Deploy
          command: |
            mkdir -p /dockerProjects/ims
            cd /dockerProjects/ims
            
            # 기존 컨테이너 정리
            docker stop ims-app || true
            docker rm ims-app || true
            
            # 새 컨테이너 실행
            docker run -d \
              --name ims-app \
              --restart unless-stopped \
              -p 8080:8090 \
              -e TZ=Asia/Seoul \
              -e SPRING_PROFILES_ACTIVE=prod,secret \
              -e KAKAO_CLIENT_ID="${{ secrets.KAKAO_CLIENT_ID }}" \
              -e GOOGLE_CLIENT_ID="${{ secrets.GOOGLE_CLIENT_ID }}" \
              -e GOOGLE_CLIENT_SECRET="${{ secrets.GOOGLE_CLIENT_SECRET }}" \
              -e REDIS_PASSWORD="${{ secrets.REDIS_PASSWORD }}" \
              -e CUSTOM_MAIL_USERNAME="${{ secrets.CUSTOM_MAIL_USERNAME }}" \
              -e CUSTOM_MAIL_PASSWORD="${{ secrets.CUSTOM_MAIL_PASSWORD }}" \
              -e CUSTOM_JWT_SECRETKEY="${{ secrets.CUSTOM_JWT_SECRETKEY }}" \
              -e CUSTOM_ACCESS_TOKEN_EXPIRATIONSECONDS="${{ secrets.CUSTOM_ACCESS_TOKEN_EXPIRATIONSECONDS }}" \
              -e CUSTOM_DEFAULT_PROFILE_URL="${{ secrets.CUSTOM_DEFAULT_PROFILE_URL }}" \
              -e CUSTOM_AWS_S3_BUCKET_NAME="${{ secrets.CUSTOM_AWS_S3_BUCKET_NAME }}" \
              -e CUSTOM_AWS_S3_REGION="${{ secrets.CUSTOM_AWS_S3_REGION }}" \
              -e CUSTOM_AWS_S3_IMG_DIR_NAME="${{ secrets.CUSTOM_AWS_S3_IMG_DIR_NAME }}" \
              -e CUSTOM_AWS_CREDENTIALS_ACCESS_KEY="${{ secrets.CUSTOM_AWS_CREDENTIALS_ACCESS_KEY }}" \
              -e CUSTOM_AWS_CREDENTIALS_SECRET_KEY="${{ secrets.CUSTOM_AWS_CREDENTIALS_SECRET_KEY }}" \
              -e CUSTOM_ADMIN_MAIN_EMAIL="${{ secrets.CUSTOM_ADMIN_MAIN_EMAIL }}" \
              -v /dockerProjects/ims/volumes/gen:/gen \
              ghcr.io/kimkeonho/ims:latest
            
            echo "Deployment completed successfully"