'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { UserGuard } from '@/lib/auth/authGuard';
import { COLOR_PRESETS } from '@/lib/constants/colors';
import PageHeader from '../components/ui/PageHeader';
import SectionCard from '../components/ui/SectionCard';
import { recipeService, AllRecipeResponseDto } from '@/lib/api/services/recipeService';
import { inventoryService, FoodInventory } from '@/lib/api/services/inventoryService';
import { ingredientService, Ingredient } from '@/lib/api/services/ingredientService';

interface RecommendedRecipe extends AllRecipeResponseDto {
  matchPercentage: number;
  matchingIngredients: string[];
  missingIngredients: string[];
}

export default function RecipeRecommendationPage() {
  const router = useRouter();
  const [recommendedRecipes, setRecommendedRecipes] = useState<RecommendedRecipe[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [selectedCategory, setSelectedCategory] = useState<string>('all');
  const [userIngredients, setUserIngredients] = useState<string[]>([]);
  const [ingredientsMap, setIngredientsMap] = useState<Map<number, Ingredient>>(new Map());

  // ÏÇ¨Ïö©Ïûê Î≥¥Ïú† ÏãùÏû¨Î£å Î°úÎìú
  useEffect(() => {
    const fetchUserIngredients = async () => {
      try {
        // ÏãùÏû¨Î£å Ï†ïÎ≥¥ Î°úÎìú
        const ingredientsData = await ingredientService.getAllIngredients();
        const newIngredientsMap = new Map<number, Ingredient>();
        ingredientsData.forEach(ingredient => {
          if (ingredient.id) {
            newIngredientsMap.set(ingredient.id, ingredient);
          }
        });
        setIngredientsMap(newIngredientsMap);

        // ÏÇ¨Ïö©Ïûê Ïû¨Í≥† Ï†ïÎ≥¥ Î°úÎìú
        const inventoryData = await inventoryService.getInventory();
        
        // Ïû¨Í≥†ÏóêÏÑú ÏãùÏû¨Î£åÎ™Ö Ï∂îÏ∂ú
        const userIngredientNames = inventoryData
          .map(item => {
            const ingredient = item.ingredientId ? newIngredientsMap.get(item.ingredientId) : null;
            return ingredient?.name || item.ingredientName || '';
          })
          .filter(name => name.trim() !== '')
          .map(name => name.toLowerCase());

        // Ï§ëÎ≥µ Ï†úÍ±∞
        const uniqueIngredients = [...new Set(userIngredientNames)];
        setUserIngredients(uniqueIngredients);
        
        console.log('ÏÇ¨Ïö©Ïûê Î≥¥Ïú† ÏãùÏû¨Î£å:', uniqueIngredients);
      } catch (error) {
        console.error('ÏÇ¨Ïö©Ïûê ÏãùÏû¨Î£å Î°úÎìú Ïã§Ìå®:', error);
        // Í∏∞Î≥∏Í∞íÏúºÎ°ú ÏÑ§Ï†ï
        setUserIngredients([
          'ÌÜ†ÎßàÌÜ†', 'ÏñëÌåå', 'ÎßàÎäò', 'Ïò¨Î¶¨Î∏åÏò§Ïùº', 'ÏÜåÍ∏à', 'ÌõÑÏ∂î', 
          'Îã≠Í∞ÄÏä¥ÏÇ¥', 'ÌååÏä§ÌÉÄ', 'ÏπòÏ¶à', 'Î∞îÏßà', 'ÎãπÍ∑º', 'Í∞êÏûê'
        ]);
      }
    };

    fetchUserIngredients();
  }, []);

  // Î†àÏãúÌîº Ï∂îÏ≤ú Îç∞Ïù¥ÌÑ∞ Î°úÎìú
  useEffect(() => {
    const fetchRecommendations = async () => {
      if (userIngredients.length === 0) return; // ÏÇ¨Ïö©Ïûê ÏãùÏû¨Î£åÍ∞Ä Î°úÎìúÎê† ÎïåÍπåÏßÄ ÎåÄÍ∏∞
      
      try {
        setIsLoading(true);
        setError(null);
        
        const allRecipes = await recipeService.getAllRecipes();
        
        // ÏÑúÎ≤ÑÏóêÏÑú Î∞õÏïÑÏò® Îç∞Ïù¥ÌÑ∞ Í≤ÄÏÇ¨
        console.log('=== Î†àÏãúÌîº Îç∞Ïù¥ÌÑ∞ Í≤ÄÏÇ¨ ===');
        console.log('Ï†ÑÏ≤¥ Î†àÏãúÌîº Ïàò:', allRecipes.length);
        
        allRecipes.forEach((recipe, index) => {
          console.log(`Î†àÏãúÌîº ${index + 1}:`, {
            title: recipe.title,
            imageUrl: recipe.imageUrl,
            imageUrlType: typeof recipe.imageUrl,
            hasImageUrl: !!recipe.imageUrl,
            imageUrlLength: recipe.imageUrl?.length || 0,
            imageUrlValid: recipe.imageUrl && recipe.imageUrl.trim() !== '',
            imageUrlStartsWithHttp: recipe.imageUrl?.startsWith('http'),
            imageUrlStartsWithSlash: recipe.imageUrl?.startsWith('/'),
            Ï†ÑÏ≤¥_Î†àÏãúÌîº_Í∞ùÏ≤¥: recipe
          });
        });
        
        // Ïù¥ÎØ∏ÏßÄ URL ÌÜµÍ≥Ñ
        const recipesWithImage = allRecipes.filter(recipe => recipe.imageUrl && recipe.imageUrl.trim() !== '');
        const recipesWithAbsoluteUrl = allRecipes.filter(recipe => recipe.imageUrl?.startsWith('http'));
        const recipesWithRelativeUrl = allRecipes.filter(recipe => recipe.imageUrl?.startsWith('/'));
        
        console.log('=== Ïù¥ÎØ∏ÏßÄ URL ÌÜµÍ≥Ñ ===');
        console.log('Ïù¥ÎØ∏ÏßÄÍ∞Ä ÏûàÎäî Î†àÏãúÌîº:', recipesWithImage.length, '/', allRecipes.length);
        console.log('Ï†àÎåÄ URL Î†àÏãúÌîº:', recipesWithAbsoluteUrl.length);
        console.log('ÏÉÅÎåÄ URL Î†àÏãúÌîº:', recipesWithRelativeUrl.length);
        console.log('Ïù¥ÎØ∏ÏßÄÍ∞Ä ÏóÜÎäî Î†àÏãúÌîº:', allRecipes.length - recipesWithImage.length);
        
        // Í∞Å Î†àÏãúÌîºÏóê ÎåÄÌï¥ Îß§Ïπ≠Î•† Í≥ÑÏÇ∞
        const recommendations: RecommendedRecipe[] = allRecipes.map(recipe => {
          const recipeIngredients = recipe.recipeIngredientResponseDto.map(
            ing => ing.ingredientName.toLowerCase()
          );
          
          // Îçî Ï†ïÌôïÌïú Îß§Ïπ≠ Î°úÏßÅ
          const matchingIngredients = recipeIngredients.filter(ingredient =>
            userIngredients.some(userIng => {
              // Ï†ïÌôïÌïú Îß§Ïπ≠
              if (userIng === ingredient) return true;
              // Î∂ÄÎ∂Ñ Îß§Ïπ≠ (ÏÇ¨Ïö©Ïûê ÏãùÏû¨Î£åÍ∞Ä Î†àÏãúÌîº ÏãùÏû¨Î£åÏóê Ìè¨Ìï®)
              if (ingredient.includes(userIng)) return true;
              // Î∂ÄÎ∂Ñ Îß§Ïπ≠ (Î†àÏãúÌîº ÏãùÏû¨Î£åÍ∞Ä ÏÇ¨Ïö©Ïûê ÏãùÏû¨Î£åÏóê Ìè¨Ìï®)
              if (userIng.includes(ingredient)) return true;
              return false;
            })
          );
          
          const missingIngredients = recipeIngredients.filter(ingredient =>
            !userIngredients.some(userIng => {
              if (userIng === ingredient) return true;
              if (ingredient.includes(userIng)) return true;
              if (userIng.includes(ingredient)) return true;
              return false;
            })
          );
          
          const matchPercentage = recipeIngredients.length > 0 
            ? Math.round((matchingIngredients.length / recipeIngredients.length) * 100)
            : 0;
          
          return {
            ...recipe,
            matchPercentage,
            matchingIngredients,
            missingIngredients
          };
        });
        
        // Îß§Ïπ≠Î•† ÎÜíÏùÄ ÏàúÏúºÎ°ú Ï†ïÎ†¨
        recommendations.sort((a, b) => b.matchPercentage - a.matchPercentage);
        
        setRecommendedRecipes(recommendations);
      } catch (error) {
        console.error('Î†àÏãúÌîº Ï∂îÏ≤ú Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®:', error);
        setError('Î†àÏãúÌîº Ï∂îÏ≤ú Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
      } finally {
        setIsLoading(false);
      }
    };

    fetchRecommendations();
  }, [userIngredients]);

  // Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ ÌïÑÌÑ∞ÎßÅ
  const filteredRecipes = recommendedRecipes.filter(recipe => {
    if (selectedCategory === 'all') return true;
    if (selectedCategory === 'high-match') return recipe.matchPercentage >= 70;
    if (selectedCategory === 'medium-match') return recipe.matchPercentage >= 40 && recipe.matchPercentage < 70;
    if (selectedCategory === 'quick') return recipe.cookingTime <= 30;
    if (selectedCategory === 'easy') return recipe.difficultyLevel <= 2;
    if (selectedCategory === 'medium') return recipe.difficultyLevel === 3;
    if (selectedCategory === 'hard') return recipe.difficultyLevel >= 4;
    return true;
  });

  // ÎÇúÏù¥ÎèÑ ÌÖçÏä§Ìä∏ Î≥ÄÌôò (1-5 Îã®Í≥Ñ)
  const getDifficultyText = (level: number) => {
    switch (level) {
      case 1: return 'Îß§Ïö∞ Ïâ¨ÏõÄ';
      case 2: return 'Ïâ¨ÏõÄ';
      case 3: return 'Î≥¥ÌÜµ';
      case 4: return 'Ïñ¥Î†§ÏõÄ';
      case 5: return 'Îß§Ïö∞ Ïñ¥Î†§ÏõÄ';
      default: return 'Î≥¥ÌÜµ';
    }
  };

  // ÎÇúÏù¥ÎèÑ ÏÉâÏÉÅ Î≥ÄÌôò (1-5 Îã®Í≥Ñ)
  const getDifficultyColor = (level: number) => {
    switch (level) {
      case 1: return 'bg-green-100 text-green-800';
      case 2: return 'bg-blue-100 text-blue-800';
      case 3: return 'bg-yellow-100 text-yellow-800';
      case 4: return 'bg-orange-100 text-orange-800';
      case 5: return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  // ÎÇúÏù¥ÎèÑ ÏïÑÏù¥ÏΩò Î≥ÄÌôò
  const getDifficultyIcon = (level: number) => {
    switch (level) {
      case 1: return 'üü¢';
      case 2: return 'üîµ';
      case 3: return 'üü°';
      case 4: return 'üü†';
      case 5: return 'üî¥';
      default: return '‚ö™';
    }
  };

  // Îß§Ïπ≠Î•† ÏÉâÏÉÅ Î≥ÄÌôò
  const getMatchColor = (percentage: number) => {
    if (percentage >= 70) return 'bg-green-100 text-green-800';
    if (percentage >= 40) return 'bg-yellow-100 text-yellow-800';
    return 'bg-red-100 text-red-800';
  };

  // ÎÇ†Ïßú Ìè¨Îß∑ÌåÖ
  const formatDate = (dateString: string) => {
    try {
      const date = new Date(dateString);
      return date.toLocaleDateString('ko-KR');
    } catch {
      return dateString;
    }
  };

  return (
    <UserGuard>
      <div className={`min-h-screen ${COLOR_PRESETS.STATISTICS_PAGE.background} p-6`}>
        <div className="max-w-7xl mx-auto">
          {/* Main Card Container */}
          <div className="bg-white rounded-2xl shadow-lg border border-orange-100 p-8">
            
            {/* Header Card */}
            <PageHeader 
              title="Î†àÏãúÌîº Ï∂îÏ≤ú"
              description="Î≥¥Ïú†ÌïòÍ≥† ÏûàÎäî ÏãùÏû¨Î£åÎ•º Í∏∞Î∞òÏúºÎ°ú ÎßûÏ∂§ Î†àÏãúÌîºÎ•º Ï∂îÏ≤úÌï¥ÎìúÎ¶ΩÎãàÎã§"
              variant="statistics"
            >
              {/* Filter Controls */}
              <div className="flex justify-end">
                <div className="bg-white/20 backdrop-blur-sm rounded-lg p-4 shadow-sm border border-white/30 w-full max-w-xl">
                  <div className="flex flex-wrap gap-2">
                    <button
                      onClick={() => setSelectedCategory('all')}
                      className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${
                        selectedCategory === 'all' 
                          ? 'bg-orange-500 text-white' 
                          : 'bg-white text-gray-700 hover:bg-orange-50'
                      }`}
                    >
                      Ï†ÑÏ≤¥
                    </button>
                    <button
                      onClick={() => setSelectedCategory('high-match')}
                      className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${
                        selectedCategory === 'high-match' 
                          ? 'bg-orange-500 text-white' 
                          : 'bg-white text-gray-700 hover:bg-orange-50'
                      }`}
                    >
                      ÎÜíÏùÄ Îß§Ïπ≠Î•† (70%+)
                    </button>
                    <button
                      onClick={() => setSelectedCategory('medium-match')}
                      className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${
                        selectedCategory === 'medium-match' 
                          ? 'bg-orange-500 text-white' 
                          : 'bg-white text-gray-700 hover:bg-orange-50'
                      }`}
                    >
                      Ï§ëÍ∞Ñ Îß§Ïπ≠Î•† (40-69%)
                    </button>
                    <button
                      onClick={() => setSelectedCategory('quick')}
                      className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${
                        selectedCategory === 'quick' 
                          ? 'bg-orange-500 text-white' 
                          : 'bg-white text-gray-700 hover:bg-orange-50'
                      }`}
                    >
                      Îπ†Î•∏ ÏöîÎ¶¨ (30Î∂Ñ Ïù¥Ìïò)
                    </button>
                    <button
                      onClick={() => setSelectedCategory('easy')}
                      className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${
                        selectedCategory === 'easy' 
                          ? 'bg-orange-500 text-white' 
                          : 'bg-white text-gray-700 hover:bg-orange-50'
                      }`}
                    >
                      üü¢ Ïâ¨Ïö¥ ÏöîÎ¶¨
                    </button>
                    <button
                      onClick={() => setSelectedCategory('medium')}
                      className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${
                        selectedCategory === 'medium' 
                          ? 'bg-orange-500 text-white' 
                          : 'bg-white text-gray-700 hover:bg-orange-50'
                      }`}
                    >
                      üü° Î≥¥ÌÜµ ÎÇúÏù¥ÎèÑ
                    </button>
                    <button
                      onClick={() => setSelectedCategory('hard')}
                      className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${
                        selectedCategory === 'hard' 
                          ? 'bg-orange-500 text-white' 
                          : 'bg-white text-gray-700 hover:bg-orange-50'
                      }`}
                    >
                      üî¥ Ïñ¥Î†§Ïö¥ ÏöîÎ¶¨
                    </button>
                  </div>
                </div>
              </div>
            </PageHeader>

            {/* User Ingredients Section */}
            <SectionCard title="üß∫ Î≥¥Ïú† ÏãùÏû¨Î£å" variant="statistics">
              {userIngredients.length > 0 ? (
                <>
                  <div className="flex flex-wrap gap-2">
                    {userIngredients.map((ingredient, index) => (
                      <span 
                        key={index} 
                        className="px-3 py-1 bg-gradient-to-r from-orange-100 to-yellow-100 text-orange-800 rounded-full text-sm font-medium border border-orange-200"
                      >
                        {ingredient}
                      </span>
                    ))}
                  </div>
                  <div className="mt-4 text-sm text-gray-600">
                    üí° Ï¥ù {userIngredients.length}Í∞úÏùò ÏãùÏû¨Î£åÎ•º Î≥¥Ïú†ÌïòÍ≥† ÏûàÏäµÎãàÎã§. Ïù¥ Ïû¨Î£åÎì§ÏùÑ ÌôúÏö©Ìïú Î†àÏãúÌîºÎ•º Ï∂îÏ≤úÌï¥ÎìúÎ¶ΩÎãàÎã§.
                  </div>
                </>
              ) : (
                <div className="text-center py-8">
                  <div className="text-gray-500 text-lg mb-4">Î≥¥Ïú† Ï§ëÏù∏ ÏãùÏû¨Î£åÍ∞Ä ÏóÜÏäµÎãàÎã§</div>
                  <button
                    onClick={() => router.push('/inventory')}
                    className="px-6 py-3 bg-orange-600 text-white rounded-lg hover:bg-orange-700 transition-colors font-medium"
                  >
                    ÏãùÏû¨Î£å Ï∂îÍ∞ÄÌïòÎü¨ Í∞ÄÍ∏∞
                  </button>
                </div>
              )}
            </SectionCard>

            {/* Recommended Recipes */}
            <SectionCard title="üçΩÔ∏è Ï∂îÏ≤ú Î†àÏãúÌîº" variant="statistics">
              {isLoading ? (
                <div className="flex justify-center items-center h-64">
                  <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-orange-600"></div>
                  <p className="ml-4 text-gray-600">Î†àÏãúÌîºÎ•º Î∂ÑÏÑùÌïòÎäî Ï§ë...</p>
                </div>
              ) : error ? (
                <div className="text-center py-12">
                  <div className="text-red-500 text-lg mb-4">‚ö†Ô∏è {error}</div>
                  <button
                    onClick={() => window.location.reload()}
                    className="px-4 py-2 bg-orange-600 text-white rounded-lg hover:bg-orange-700 transition-colors"
                  >
                    Îã§Ïãú ÏãúÎèÑ
                  </button>
                </div>
              ) : filteredRecipes.length === 0 ? (
                <div className="text-center py-12">
                  <div className="text-gray-500 text-lg mb-4">
                    {userIngredients.length === 0 
                      ? 'Î≥¥Ïú† ÏãùÏû¨Î£åÍ∞Ä ÏóÜÏñ¥ Î†àÏãúÌîºÎ•º Ï∂îÏ≤úÌï† Ïàò ÏóÜÏäµÎãàÎã§.'
                      : 'ÏÑ†ÌÉùÌïú Ï°∞Í±¥Ïóê ÎßûÎäî Î†àÏãúÌîºÍ∞Ä ÏóÜÏäµÎãàÎã§.'
                    }
                  </div>
                  <div className="flex gap-4 justify-center">
                    <button
                      onClick={() => setSelectedCategory('all')}
                      className="px-6 py-3 bg-orange-600 text-white rounded-lg hover:bg-orange-700 transition-colors font-medium"
                    >
                      Ï†ÑÏ≤¥ Î†àÏãúÌîº Î≥¥Í∏∞
                    </button>
                    {userIngredients.length === 0 && (
                      <button
                        onClick={() => router.push('/inventory')}
                        className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors font-medium"
                      >
                        ÏãùÏû¨Î£å Ï∂îÍ∞ÄÌïòÍ∏∞
                      </button>
                    )}
                  </div>
                </div>
              ) : (
                <div className="space-y-6">
                  {filteredRecipes.map((recipe, index) => (
                    <div
                      key={index}
                      className="bg-white rounded-xl shadow-sm border border-orange-100 p-6 hover:shadow-md transition-shadow cursor-pointer"
                      onClick={() => router.push(`/recipes/${index}`)}
                    >
                      <div className="flex items-start gap-6 mb-4">
                        {/* Î†àÏãúÌîº Ïù¥ÎØ∏ÏßÄ - ÌÅ¨Í∏∞ Ï¶ùÍ∞Ä */}
                        <div className="w-48 h-48 bg-gradient-to-br from-orange-100 to-yellow-100 rounded-xl overflow-hidden flex-shrink-0 shadow-sm">
                          {recipe.imageUrl ? (
                            <img 
                              src={recipe.imageUrl} 
                              alt={recipe.title}
                              className="w-full h-full object-cover"
                              onError={(e) => {
                                // Ïù¥ÎØ∏ÏßÄ Î°úÎìú Ïã§Ìå® Ïãú Í∏∞Î≥∏ Ïù¥ÎØ∏ÏßÄÎ°ú ÎåÄÏ≤¥
                                const target = e.target as HTMLImageElement;
                                target.style.display = 'none';
                                const parent = target.parentElement;
                                if (parent) {
                                  parent.innerHTML = `
                                    <div class="w-full h-full flex items-center justify-center bg-gradient-to-br from-orange-200 to-yellow-200">
                                      <span class="text-6xl">üçΩÔ∏è</span>
                                    </div>
                                  `;
                                }
                              }}
                            />
                          ) : (
                            <div className="w-full h-full flex items-center justify-center bg-gradient-to-br from-orange-200 to-yellow-200">
                              <span className="text-6xl">üçΩÔ∏è</span>
                            </div>
                          )}
                        </div>
                        
                        {/* Î†àÏãúÌîº Ï†ïÎ≥¥ - Ïò§Î•∏Ï™ΩÏóê Î∞∞Ïπò */}
                        <div className="flex-1 min-w-0">
                          {/* Ï†úÎ™©Í≥º ÏûëÏÑ±Ïûê Ï†ïÎ≥¥ */}
                          <div className="mb-4">
                            <h3 className="text-xl font-bold text-gray-900 mb-2">{recipe.title}</h3>
                            <div className="flex items-center gap-3">
                              <div className="w-10 h-10 bg-gradient-to-br from-orange-500 to-red-500 rounded-full flex items-center justify-center text-white font-medium overflow-hidden">
                                {recipe.userProfile ? (
                                  <img 
                                    src={recipe.userProfile} 
                                    alt={recipe.userNickName}
                                    className="w-full h-full object-cover"
                                  />
                                ) : (
                                  recipe.userNickName.charAt(0).toUpperCase()
                                )}
                              </div>
                              <div>
                                <p className="text-sm font-medium text-gray-700">{recipe.userNickName}</p>
                                <p className="text-xs text-gray-500">{formatDate(recipe.createdAt)}</p>
                              </div>
                            </div>
                          </div>
                          
                          {/* Îß§Ïπ≠Î•†Í≥º ÎÇúÏù¥ÎèÑ */}
                          <div className="flex items-center gap-3 mb-4">
                            <span className={`px-4 py-2 rounded-full text-sm font-bold ${getMatchColor(recipe.matchPercentage)}`}>
                              Îß§Ïπ≠Î•† {recipe.matchPercentage}%
                            </span>
                            <span className={`px-4 py-2 rounded-full text-sm font-medium ${getDifficultyColor(recipe.difficultyLevel)} flex items-center gap-2`}>
                              <span>{getDifficultyIcon(recipe.difficultyLevel)}</span>
                              <span>{getDifficultyText(recipe.difficultyLevel)}</span>
                            </span>
                          </div>
                          
                          {/* Î†àÏãúÌîº ÏÑ§Î™Ö */}
                          <p className="text-gray-600 line-clamp-3 text-sm leading-relaxed">{recipe.description}</p>
                        </div>
                      </div>
                      
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                        {/* Î≥¥Ïú† Ïû¨Î£å */}
                        {recipe.matchingIngredients.length > 0 && (
                          <div className="bg-gradient-to-br from-green-50 to-emerald-50 rounded-lg p-4 border border-green-200">
                            <h4 className="text-sm font-semibold text-green-800 mb-2">
                              ‚úÖ Î≥¥Ïú† Ïû¨Î£å ({recipe.matchingIngredients.length}Í∞ú)
                            </h4>
                            <div className="flex flex-wrap gap-1">
                              {recipe.matchingIngredients.slice(0, 3).map((ingredient, idx) => (
                                <span key={idx} className="px-2 py-1 bg-green-100 rounded-full text-xs text-green-700">
                                  {ingredient}
                                </span>
                              ))}
                              {recipe.matchingIngredients.length > 3 && (
                                <span className="px-2 py-1 bg-green-100 rounded-full text-xs text-green-700">
                                  +{recipe.matchingIngredients.length - 3}Í∞ú Îçî
                                </span>
                              )}
                            </div>
                          </div>
                        )}
                        
                        {/* ÌïÑÏöîÌïú Ïû¨Î£å */}
                        {recipe.missingIngredients.length > 0 && (
                          <div className="bg-gradient-to-br from-red-50 to-pink-50 rounded-lg p-4 border border-red-200">
                            <h4 className="text-sm font-semibold text-red-800 mb-2">
                              üõí Íµ¨Îß§ ÌïÑÏöî ({recipe.missingIngredients.length}Í∞ú)
                            </h4>
                            <div className="flex flex-wrap gap-1">
                              {recipe.missingIngredients.slice(0, 3).map((ingredient, idx) => (
                                <span key={idx} className="px-2 py-1 bg-red-100 rounded-full text-xs text-red-700">
                                  {ingredient}
                                </span>
                              ))}
                              {recipe.missingIngredients.length > 3 && (
                                <span className="px-2 py-1 bg-red-100 rounded-full text-xs text-red-700">
                                  +{recipe.missingIngredients.length - 3}Í∞ú Îçî
                                </span>
                              )}
                            </div>
                          </div>
                        )}
                      </div>
                      
                      <div className="flex items-center justify-between pt-4 border-t border-gray-100">
                        <div className="flex items-center gap-6 text-sm text-gray-500">
                          <span className="flex items-center gap-2">
                            <span className="text-lg">‚è±Ô∏è</span>
                            <span className="font-medium">{recipe.cookingTime}Î∂Ñ</span>
                          </span>
                          <span className="flex items-center gap-2">
                            <span className="text-lg">üë•</span>
                            <span className="font-medium">1Ïù∏Î∂Ñ</span>
                          </span>
                        </div>
                        <button className="px-6 py-3 bg-orange-500 text-white rounded-lg hover:bg-orange-600 transition-colors text-sm font-medium shadow-sm">
                          Î†àÏãúÌîº Î≥¥Í∏∞
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </SectionCard>

          </div>
        </div>
      </div>
    </UserGuard>
  );
}
