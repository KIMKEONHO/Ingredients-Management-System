'use client';

import { useState, useEffect } from 'react';
import { UserGuard } from '@/lib/auth/authGuard';
import { COLOR_PRESETS } from '@/lib/constants/colors';
import PageHeader from '../components/ui/PageHeader';
import SectionCard from '../components/ui/SectionCard';

interface CommunityPost {
  id: number;
  title: string;
  content: string;
  author: string;
  authorAvatar?: string;
  createdAt: string;
  likes: number;
  comments: number;
  tags: string[];
  recipe?: {
    name: string;
    ingredients: string[];
    instructions: string[];
    cookingTime: number;
    difficulty: 'easy' | 'medium' | 'hard';
    calories: number;
  };
  images?: string[];
}

export default function RecipeCommunityPage() {
  const [posts, setPosts] = useState<CommunityPost[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [selectedPost, setSelectedPost] = useState<CommunityPost | null>(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedTag, setSelectedTag] = useState<string>('all');
  const [isWritingPost, setIsWritingPost] = useState(false);

  // ÎçîÎØ∏ Îç∞Ïù¥ÌÑ∞
  const dummyPosts: CommunityPost[] = [
    {
      id: 1,
      title: 'ÏßëÏóêÏÑú ÎßåÎìúÎäî ÏôÑÎ≤ΩÌïú ÌååÏä§ÌÉÄ Î†àÏãúÌîº Í≥µÏú†Ìï¥Ïöî!',
      content: 'Ïò§ÎäòÏùÄ ÏßëÏóêÏÑú ÏâΩÍ≤å ÎßåÎì§ Ïàò ÏûàÎäî ÌÜ†ÎßàÌÜ† ÌååÏä§ÌÉÄ Î†àÏãúÌîºÎ•º Í≥µÏú†ÌïòÎ†§Í≥† Ìï¥Ïöî. Ï†ïÎßê Í∞ÑÎã®ÌïúÎç∞ ÎßõÏûàÏñ¥ÏÑú ÏûêÏ£º ÎßåÎì§Ïñ¥ Î®πÍ≥† ÏûàÏäµÎãàÎã§.',
      author: 'ÏöîÎ¶¨Ï¥àÎ≥¥',
      createdAt: '2024-01-15',
      likes: 24,
      comments: 8,
      tags: ['ÌååÏä§ÌÉÄ', 'Ïù¥ÌÉàÎ¶¨Ïïà', 'Í∞ÑÎã®ÏöîÎ¶¨'],
      recipe: {
        name: 'ÌÜ†ÎßàÌÜ† ÌååÏä§ÌÉÄ',
        ingredients: ['Ïä§ÌååÍ≤åÌã∞ 200g', 'ÌÜ†ÎßàÌÜ† 3Í∞ú', 'ÎßàÎäò 3Ï™Ω', 'Î∞îÏßà Ïûé 10Ïû•', 'ÌååÎßàÏÇ∞ ÏπòÏ¶à'],
        instructions: [
          'ÌÜ†ÎßàÌÜ†Î•º ÎÅìÎäî Î¨ºÏóê ÎÑ£Ïñ¥ ÍªçÏßàÏùÑ Î≤óÍ∏∞Í≥† Îã§ÏßÑÎã§.',
          'ÎßàÎäòÏùÑ Îã§Ï†∏ÏÑú Ïò¨Î¶¨Î∏åÏò§ÏùºÏóê Î≥∂ÏäµÎãàÎã§.',
          'ÌÜ†ÎßàÌÜ†Î•º ÎÑ£Í≥† ÎÅìÏù∏ ÌõÑ ÏÜåÍ∏à, ÏÑ§ÌÉïÏúºÎ°ú Í∞ÑÏùÑ ÎßûÏ∂•ÎãàÎã§.',
          'ÏÇ∂ÏùÄ ÌååÏä§ÌÉÄÏôÄ ÏÜåÏä§Î•º ÏÑûÍ≥† Î∞îÏßàÍ≥º ÌååÎßàÏÇ∞ ÏπòÏ¶àÎ•º Ïò¨Î¶ΩÎãàÎã§.'
        ],
        cookingTime: 25,
        difficulty: 'easy',
        calories: 380
      }
    },
    {
      id: 2,
      title: 'Í±¥Í∞ïÌïú Îã≠Í∞ÄÏä¥ÏÇ¥ ÏÉêÎü¨Îìú Ï°∞Ìï© Ï∂îÏ≤ú',
      content: 'Îã§Ïù¥Ïñ¥Ìä∏ Ï§ëÏù∏Îç∞ Îã≠Í∞ÄÏä¥ÏÇ¥ ÏÉêÎü¨ÎìúÍ∞Ä ÎÑàÎ¨¥ ÏßàÎ†§ÏÑú Îã§ÏñëÌïú Ï°∞Ìï©ÏùÑ ÏãúÎèÑÌï¥Î¥§Ïñ¥Ïöî. Ïù¥Î≤àÏóê ÎßåÎì† Ï°∞Ìï©Ïù¥ Ï†ïÎßê ÎßõÏûàÏóàÏäµÎãàÎã§!',
      author: 'Í±¥Í∞ïÎü¨Î≤Ñ',
      createdAt: '2024-01-14',
      likes: 18,
      comments: 12,
      tags: ['ÏÉêÎü¨Îìú', 'Í±¥Í∞ïÏãù', 'Îã§Ïù¥Ïñ¥Ìä∏'],
      recipe: {
        name: 'Îã≠Í∞ÄÏä¥ÏÇ¥ ÏÉêÎü¨Îìú',
        ingredients: ['Îã≠Í∞ÄÏä¥ÏÇ¥ 200g', 'ÏñëÏÉÅÏ∂î 100g', 'ÌÜ†ÎßàÌÜ† 1Í∞ú', 'Ïò§Ïù¥ 1/2Í∞ú', 'Ïò¨Î¶¨Î∏åÏò§Ïùº 1ÌÅ∞Ïà†'],
        instructions: [
          'Îã≠Í∞ÄÏä¥ÏÇ¥ÏùÑ ÏÜåÍ∏à, ÌõÑÏ∂îÎ°ú Í∞ÑÏùÑ ÎßûÏ∂ò ÌõÑ Ìå¨Ïóê ÍµΩÏäµÎãàÎã§.',
          'ÏñëÏÉÅÏ∂îÎ•º ÏîªÏñ¥ÏÑú Î®πÍ∏∞ Ï¢ãÏùÄ ÌÅ¨Í∏∞Î°ú ÏûêÎ¶ÖÎãàÎã§.',
          'ÌÜ†ÎßàÌÜ†ÏôÄ Ïò§Ïù¥Î•º Ïç∞Ïñ¥Ï§çÎãàÎã§.',
          'Î™®Îì† Ïû¨Î£åÎ•º Ï†ëÏãúÏóê Îã¥Í≥† Ïò¨Î¶¨Î∏åÏò§Ïùº ÎìúÎ†àÏã±ÏùÑ ÎøåÎ¶ΩÎãàÎã§.'
        ],
        cookingTime: 20,
        difficulty: 'easy',
        calories: 280
      }
    },
    {
      id: 3,
      title: 'Ïó∞Ïñ¥ Ïä§ÌÖåÏù¥ÌÅ¨ ÏôÑÎ≤Ω Íµ¨Ïö∞Í∏∞ ÌåÅ',
      content: 'Ïó∞Ïñ¥ Ïä§ÌÖåÏù¥ÌÅ¨Î•º ÏôÑÎ≤ΩÌïòÍ≤å ÍµΩÎäî Î∞©Î≤ïÏùÑ Ïó∞Íµ¨Ìï¥Î¥§ÎäîÎç∞, Ïò®ÎèÑÏôÄ ÏãúÍ∞ÑÏù¥ Ï†ïÎßê Ï§ëÏöîÌïòÎçîÎùºÍ≥†Ïöî. Ïó¨Îü¨Î∂ÑÎèÑ ÏãúÎèÑÌï¥Î≥¥ÏÑ∏Ïöî!',
      author: 'Í≥†Í∏âÏöîÎ¶¨ÏÇ¨',
      createdAt: '2024-01-13',
      likes: 31,
      comments: 15,
      tags: ['Ïó∞Ïñ¥', 'Ïä§ÌÖåÏù¥ÌÅ¨', 'Í≥†Í∏âÏöîÎ¶¨'],
      recipe: {
        name: 'Ïó∞Ïñ¥ Ïä§ÌÖåÏù¥ÌÅ¨',
        ingredients: ['Ïó∞Ïñ¥ 300g', 'Î∏åÎ°úÏΩúÎ¶¨ 100g', 'Í∞êÏûê 2Í∞ú', 'Î≤ÑÌÑ∞ 2ÌÅ∞Ïà†', 'Î†àÎ™¨ 1/2Í∞ú'],
        instructions: [
          'Ïó∞Ïñ¥Ïóê ÏÜåÍ∏à, ÌõÑÏ∂îÎ•º ÎøåÎ¶¨Í≥† 10Î∂ÑÍ∞Ñ Ïû¨ÏõåÎë°ÎãàÎã§.',
          'Ìå¨Ïóê Î≤ÑÌÑ∞Î•º ÎÖπÏù¥Í≥† Ïó∞Ïñ¥Î•º ÏïûÎí§Î°ú 4Î∂ÑÏî© ÍµΩÏäµÎãàÎã§.',
          'Î∏åÎ°úÏΩúÎ¶¨ÏôÄ Í∞êÏûêÎ•º ÏÇ∂ÏïÑÏÑú Í≥ÅÎì§ÏûÖÎãàÎã§.',
          'ÏôÑÏÑ±Îêú Ïó∞Ïñ¥Ïóê Î†àÎ™¨Ï¶ôÏùÑ ÎøåÎ†§ÏÑú ÏÑúÎπôÌï©ÎãàÎã§.'
        ],
        cookingTime: 30,
        difficulty: 'medium',
        calories: 450
      }
    }
  ];

  useEffect(() => {
    setTimeout(() => {
      setPosts(dummyPosts);
      setIsLoading(false);
    }, 1000);
  }, []);

  const filteredPosts = posts.filter(post => {
    const matchesSearch = post.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         post.content.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesTag = selectedTag === 'all' || post.tags.includes(selectedTag);
    
    return matchesSearch && matchesTag;
  });

  const allTags = Array.from(new Set(posts.flatMap(post => post.tags)));

  const getDifficultyText = (difficulty: string) => {
    switch (difficulty) {
      case 'easy': return 'Ïâ¨ÏõÄ';
      case 'medium': return 'Î≥¥ÌÜµ';
      case 'hard': return 'Ïñ¥Î†§ÏõÄ';
      default: return difficulty;
    }
  };

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case 'easy': return 'bg-green-100 text-green-800';
      case 'medium': return 'bg-yellow-100 text-yellow-800';
      case 'hard': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  return (
    <UserGuard>
      <div className={`min-h-screen ${COLOR_PRESETS.STATISTICS_PAGE.background} p-6`}>
        <div className="max-w-7xl mx-auto">
          {/* Main Card Container */}
          <div className="bg-white rounded-2xl shadow-lg border border-blue-100 p-8">
            
            {/* Header Card */}
            <PageHeader 
              title="Î†àÏãúÌîº Í≥µÏú† Ïª§ÎÆ§ÎãàÌã∞"
              description="ÎßõÏûàÎäî Î†àÏãúÌîºÎ•º Í≥µÏú†ÌïòÍ≥† Îã§Î•∏ ÏÇ¨ÎûåÎì§Ïùò ÏöîÎ¶¨Î≤ïÏùÑ ÌôïÏù∏Ìï¥Î≥¥ÏÑ∏Ïöî"
              variant="statistics"
            >
              {/* Search and Filter */}
              <div className="flex justify-end">
                <div className="bg-white/20 backdrop-blur-sm rounded-lg p-4 shadow-sm border border-white/30 w-full max-w-2xl">
                  <div className="flex flex-col md:flex-row gap-4">
                    <div className="flex-1">
                      <input
                        type="text"
                        placeholder="Ï†úÎ™©Ïù¥ÎÇò ÎÇ¥Ïö©ÏúºÎ°ú Í≤ÄÏÉâ..."
                        value={searchTerm}
                        onChange={(e) => setSearchTerm(e.target.value)}
                        className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
                      />
                    </div>
                    <div className="flex gap-4">
                      <select
                        value={selectedTag}
                        onChange={(e) => setSelectedTag(e.target.value)}
                        className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500"
                      >
                        <option value="all">Î™®Îì† ÌÉúÍ∑∏</option>
                        {allTags.map(tag => (
                          <option key={tag} value={tag}>{tag}</option>
                        ))}
                      </select>
                      <button
                        onClick={() => setIsWritingPost(true)}
                        className="px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors font-medium"
                      >
                        Í∏ÄÏì∞Í∏∞
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            </PageHeader>

            {/* Posts List Card */}
            <SectionCard title="Ïª§ÎÆ§ÎãàÌã∞ Í≤åÏãúÍ∏Ä" variant="statistics">
              {isLoading ? (
                <div className="flex justify-center items-center h-64">
                  <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-green-600"></div>
                </div>
              ) : (
                <div className="space-y-6">
                  {filteredPosts.map(post => (
                    <div
                      key={post.id}
                      className="bg-white rounded-xl shadow-sm border border-blue-100 p-6 hover:shadow-md transition-shadow cursor-pointer"
                      onClick={() => setSelectedPost(post)}
                    >
                      <div className="flex items-start justify-between mb-4">
                        <div className="flex items-center gap-3">
                          <div className="w-10 h-10 bg-gradient-to-br from-green-500 to-blue-500 rounded-full flex items-center justify-center text-white font-medium">
                            {post.author.charAt(0)}
                          </div>
                          <div>
                            <h3 className="text-lg font-semibold text-gray-900">{post.title}</h3>
                            <p className="text-sm text-gray-500">{post.author} ‚Ä¢ {post.createdAt}</p>
                          </div>
                        </div>
                        <div className="flex items-center gap-4 text-sm text-gray-500">
                          <span>üëç {post.likes}</span>
                          <span>üí¨ {post.comments}</span>
                        </div>
                      </div>
                      
                      <p className="text-gray-600 mb-4 line-clamp-2">{post.content}</p>
                      
                      {post.recipe && (
                        <div className="bg-gradient-to-br from-green-50 to-blue-50 rounded-lg p-4 mb-4 border border-green-200">
                          <div className="flex items-center gap-2 mb-2">
                            <span className="text-sm font-medium text-gray-700">üçΩÔ∏è {post.recipe.name}</span>
                            <span className={`px-2 py-1 rounded-full text-xs font-medium ${getDifficultyColor(post.recipe.difficulty)}`}>
                              {getDifficultyText(post.recipe.difficulty)}
                            </span>
                            <span className="text-xs text-gray-500">‚è±Ô∏è {post.recipe.cookingTime}Î∂Ñ</span>
                            <span className="text-xs text-gray-500">üî• {post.recipe.calories}kcal</span>
                          </div>
                          <p className="text-sm text-gray-600">
                            Ïû¨Î£å: {post.recipe.ingredients.slice(0, 3).join(', ')}
                            {post.recipe.ingredients.length > 3 && ` Ïô∏ ${post.recipe.ingredients.length - 3}Í∞ú`}
                          </p>
                        </div>
                      )}
                      
                      <div className="flex flex-wrap gap-1">
                        {post.tags.map(tag => (
                          <span key={tag} className="px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full">
                            #{tag}
                          </span>
                        ))}
                      </div>
                    </div>
                  ))}
                </div>
              )}

              {filteredPosts.length === 0 && !isLoading && (
                <div className="text-center py-12">
                  <p className="text-gray-500 text-lg">Í≤ÄÏÉâ Ï°∞Í±¥Ïóê ÎßûÎäî Í≤åÏãúÍ∏ÄÏù¥ ÏóÜÏäµÎãàÎã§.</p>
                </div>
              )}
            </SectionCard>

            {/* Post Detail Modal */}
            {selectedPost && (
              <div className="fixed inset-0 z-50">
                <div className="absolute inset-0 bg-black/40" onClick={() => setSelectedPost(null)} />
                <div className="absolute inset-0 flex items-center justify-center p-4">
                  <div className="w-full max-w-4xl bg-white rounded-lg shadow-xl p-6 max-h-[90vh] overflow-y-auto">
                    <div className="flex items-center justify-between mb-6">
                      <div className="flex items-center gap-3">
                        <div className="w-12 h-12 bg-gradient-to-br from-green-500 to-blue-500 rounded-full flex items-center justify-center text-white font-medium">
                          {selectedPost.author.charAt(0)}
                        </div>
                        <div>
                          <h2 className="text-2xl font-bold text-gray-900">{selectedPost.title}</h2>
                          <p className="text-gray-500">{selectedPost.author} ‚Ä¢ {selectedPost.createdAt}</p>
                        </div>
                      </div>
                      <button 
                        onClick={() => setSelectedPost(null)}
                        className="text-gray-500 hover:text-gray-700 text-2xl"
                      >
                        ‚úï
                      </button>
                    </div>
                    
                    <div className="mb-6">
                      <p className="text-gray-700 leading-relaxed">{selectedPost.content}</p>
                    </div>

                    {selectedPost.recipe && (
                      <div className="bg-gradient-to-br from-green-50 to-blue-50 rounded-lg p-6 mb-6 border border-green-200">
                        <h3 className="text-xl font-semibold text-gray-900 mb-4">üçΩÔ∏è {selectedPost.recipe.name}</h3>
                        
                        <div className="flex items-center gap-4 mb-4">
                          <span className={`px-3 py-1 rounded-full text-sm font-medium ${getDifficultyColor(selectedPost.recipe.difficulty)}`}>
                            {getDifficultyText(selectedPost.recipe.difficulty)}
                          </span>
                          <span className="text-sm text-gray-500">‚è±Ô∏è {selectedPost.recipe.cookingTime}Î∂Ñ</span>
                          <span className="text-sm text-gray-500">üî• {selectedPost.recipe.calories}kcal</span>
                        </div>

                        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                          <div>
                            <h4 className="text-lg font-semibold text-gray-900 mb-3">ÌïÑÏöîÌïú Ïû¨Î£å</h4>
                            <ul className="space-y-2">
                              {selectedPost.recipe.ingredients.map((ingredient, index) => (
                                <li key={index} className="flex items-center text-gray-700">
                                  <span className="w-2 h-2 bg-green-500 rounded-full mr-3"></span>
                                  {ingredient}
                                </li>
                              ))}
                            </ul>
                          </div>
                          
                          <div>
                            <h4 className="text-lg font-semibold text-gray-900 mb-3">Ï°∞Î¶¨ Î∞©Î≤ï</h4>
                            <ol className="space-y-2">
                              {selectedPost.recipe.instructions.map((instruction, index) => (
                                <li key={index} className="flex text-gray-700">
                                  <span className="w-6 h-6 bg-green-500 text-white rounded-full flex items-center justify-center text-sm font-medium mr-3 flex-shrink-0">
                                    {index + 1}
                                  </span>
                                  <span>{instruction}</span>
                                </li>
                              ))}
                            </ol>
                          </div>
                        </div>
                      </div>
                    )}

                    <div className="flex items-center justify-between pt-6 border-t">
                      <div className="flex items-center gap-4">
                        <button className="flex items-center gap-2 px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors">
                          üëç Ï¢ãÏïÑÏöî {selectedPost.likes}
                        </button>
                        <button className="flex items-center gap-2 px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors">
                          üí¨ ÎåìÍ∏Ä {selectedPost.comments}
                        </button>
                      </div>
                      <div className="flex flex-wrap gap-1">
                        {selectedPost.tags.map(tag => (
                          <span key={tag} className="px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full">
                            #{tag}
                          </span>
                        ))}
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            )}

            {/* Write Post Modal */}
            {isWritingPost && (
              <div className="fixed inset-0 z-50">
                <div className="absolute inset-0 bg-black/40" onClick={() => setIsWritingPost(false)} />
                <div className="absolute inset-0 flex items-center justify-center p-4">
                  <div className="w-full max-w-2xl bg-white rounded-lg shadow-xl p-6">
                    <div className="flex items-center justify-between mb-6">
                      <h2 className="text-2xl font-bold text-gray-900">ÏÉà Í≤åÏãúÍ∏Ä ÏûëÏÑ±</h2>
                      <button 
                        onClick={() => setIsWritingPost(false)}
                        className="text-gray-500 hover:text-gray-700 text-2xl"
                      >
                        ‚úï
                      </button>
                    </div>
                    
                    <div className="space-y-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">Ï†úÎ™©</label>
                        <input
                          type="text"
                          placeholder="Í≤åÏãúÍ∏Ä Ï†úÎ™©ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                          className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
                        />
                      </div>
                      
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">ÎÇ¥Ïö©</label>
                        <textarea
                          rows={6}
                          placeholder="Î†àÏãúÌîºÎÇò ÏöîÎ¶¨ Í≤ΩÌóòÏùÑ Í≥µÏú†Ìï¥Ï£ºÏÑ∏Ïöî"
                          className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
                        />
                      </div>
                      
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">ÌÉúÍ∑∏</label>
                        <input
                          type="text"
                          placeholder="ÌÉúÍ∑∏Î•º ÏâºÌëúÎ°ú Íµ¨Î∂ÑÌïòÏó¨ ÏûÖÎ†•ÌïòÏÑ∏Ïöî (Ïòà: ÌååÏä§ÌÉÄ, Ïù¥ÌÉàÎ¶¨Ïïà, Í∞ÑÎã®ÏöîÎ¶¨)"
                          className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
                        />
                      </div>
                    </div>

                    <div className="flex gap-3 mt-6">
                      <button
                        onClick={() => setIsWritingPost(false)}
                        className="flex-1 px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors"
                      >
                        Ï∑®ÏÜå
                      </button>
                      <button
                        onClick={() => {
                          alert('Í≤åÏãúÍ∏ÄÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏûëÏÑ±ÎêòÏóàÏäµÎãàÎã§!');
                          setIsWritingPost(false);
                        }}
                        className="flex-1 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
                      >
                        Í≤åÏãúÌïòÍ∏∞
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </UserGuard>
  );
}
